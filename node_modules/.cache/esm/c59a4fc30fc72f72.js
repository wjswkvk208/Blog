let Post;_0fc‍.x([["write",()=>write],["list",()=>list],["read",()=>read],["remove",()=>remove],["update",()=>update]]);_0fc‍.w("../../models/post.js",[["default",["Post"],function(v){Post=v}]]);

       const write = async ctx => {
    const {title,body,tags} = ctx.request.body;
    const post = new Post({
        title,body,tags,
    });

    try {
        await post.save();
        ctx.body = post;
    } catch (error) {
        ctx.throw(500,error);
    }
};

       const list = async ctx =>{
    
    try {
        const post = await Post.find().exec();
        if(!post){
            ctx.status = 404;
            return;
        }
        ctx.body = post;
    } catch (error) {
        ctx.throw(500, error);
    }
};

       const read = async ctx => {
    const {id} = ctx.params;
    try {
        const post = await Post.findById(id).exec();
        if(!post){
            ctx.status = 404;
            return;
        }
        ctx.body = post;
    } catch (error) {
        ctx.throw(500, error);
    }
}

       const remove = async ctx =>{    
    const {id} = ctx.params;
    try {
        const post = await Post.findByIdAndRemove(id).exec();
        ctx.status = 204;
        ctx.body = post;
    } catch (error) {
        ctx.throw(500, error);
    }
};

       const update = async ctx =>{
    const {id} = ctx.params;
    try {
        const post = await Post.findByIdAndUpdate(id, ctx.request.body,{
            new:true,
        }).exec();
        if(!post){
            ctx.status = 404;
            ctx.body = post;
        }
        ctx.body = post;
    } catch (error) {
        ctx.throw(500, error);        
    }
}